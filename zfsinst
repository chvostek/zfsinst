#!/bin/sh

# https://github.com/chvostek/zfsinst

usage() {
cat <<EOTu

Usage: zfsinst [options]

	where options are any of:
	 -h	this help
	 -v	be more verbose
	 -d	show obscene amounts of debugging goop
	 -q	be quiet (cancels verbose, suppress other output)
	 -b	batch mode - assume default response to all questions
	 -n	go through the motions but make no changes
	 -z s	name the pool (default is "z")

EOTu
}

# Exit immediately if we encounter an error
set -e

# Set defaults
Debug=false; vflag=""; AskYN=true; NoPrompt=true; Doit=true; Doit_e=""; Quiet=false; qflag=""; poolname="z"

while getopts hvdqbn opt; do
  case "$opt" in
    h)  usage; exit 0 ;;
    v)  Verbose=true; vflag="-v" ;;
    q)  Verbose=false; vflag=""; Quit=true; qflag="-q" ;;
    d)  Debug=true; Verbose=true; vflag="-v" ;;
    b)  NoPrompt=true ;;
    n)  Doit=false; Doit_e=echo ;;
    z)  poolname="$OPTARG" ;;
    *)  usage; exit 1 ;;
  esac
done
shift `expr $OPTIND - 1`

if [ -z "$poolname" ]; then
  echo "ERROR: pool name must not be empty" >&2
  kill $$
elif expr "$poolname" : '[^a-z]' >/dev/null; then
  echo "ERROR: pool name must begin with a letter" >&2
  kill $$
elif expr "$poolname" : '.*[^a-z0-9]' >/dev/null; then
  echo "ERROR: pool name must be alphanumeric" >&2
  kill $$
fi

if df | grep -q ^${poolname}/; then
  echo ">> Cleaning up previous install..."
  zfs list | grep ^${poolname}/ | cut -f1 -d\  | sort -r | xargs -n 1 $Doit_e zfs destroy
  $Doit_e zpool destroy z
fi

# Common tools
gpart=/sbin/gpart
zpool=/sbin/zpool
zfs=/sbin/zfs
gnop=/sbin/gnop
chroot=/usr/sbin/chroot

vdevtype=""

# Auto-select volume type based on number of disks available
if [ ! -c /dev/ada0 ]; then
  echo "ERROR: no ada0: I don't know where to install." >&2
  kill $$
elif [ -c /dev/ada2 ]; then
  vdevtype="raid"
elif [ -c /dev/ada1 ]; then
  vdevtype="mirror"
fi

# Load ZFS, eliminate any existing pool on-disk
if /sbin/kldstat -q -m zfs; then
  if $zpool status | grep -q "pool:"; then
    if ! $Doit_e $zpool export $($zpool status | awk '$1=="pool:"{print $2;exit}'); then
      echo "ERROR: can't nuke existing pool." >&2
      kill $$
    fi
  fi
  $Doit && /sbin/kldunload zfs
fi

# Partition all available disks
disklist=""
swaplist=""
for ada in /dev/ada[0-9] /dev/ada[0-9][0-9]; do
  i=${ada##*/}
  i=${i##*[a-z]}
  if [ -c "/dev/ada${i}" ]; then
    echo ""
    dmesg | sed -ne "/^ada${i}:/s/^/>>	/p"
    if $NoPrompt; then
      echo ">> Including /dev/ada${i} ..."
    else
      read -p ">> Include /dev/ada${i} (Y/n)? " junk
      case "$junk" in
        N|n) continue ;;
      esac
    fi
    $Doit_e $gpart destroy -F ada${i} || true
    $Doit_e $gpart create -s gpt ada${i}
    $Doit_e $gpart add -a 4k -b 34 -s 64k -t freebsd-boot -l boot${i} ada${i}
    $Doit_e $gpart add -a 4k -s 4G -t freebsd-swap -l swap${i} ada${i}
    $Doit_e $gpart add -a 4k -t freebsd-zfs -l disk${i} ada${i}
    $Doit_e $gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada${i}
    $Doit_e $gnop create -S 4096 /dev/gpt/disk${i}
    disklist="$disklist /dev/gpt/disk${i}"
    swaplist="$swaplist /dev/gpt/swap${i}"
  fi
done

$NoPrompt && echo ">> Partitions/boot done, ready to start ZFS... "
$NoPrompt || read -p ">> Partitions/boot done, ready to start ZFS... (hit Enter) " junk
echo ">> Disks: $disklist"

# FIXME: what's this, again?
#
/sbin/sysctl kern.geom.debugflags=0x10

$Doit_e /sbin/kldload zfs

$NoPrompt && echo ">> Creating a ${vdevtype}..."
$NoPrompt || read -p ">> ZFS started, ready to create zpool... (hit Enter) " junk

$Doit_e $zpool create -f -o altroot=/mnt -m / -o cachefile=/tmp/zpool.cache z ${vdevtype} $disklist

$NoPrompt && echo ">> Ready to create datasets... " 
$NoPrompt || read -p ">> ZFS started, ready to create datasets... (hit Enter) " junk

# xtrace, for debugging
if $Debug; then
	set -x
fi

# Create datasets for the various bit of the filesystem
$Doit_e cd /mnt
$Doit_e $zpool set bootfs=z z
$Doit_e $zfs set checksum=fletcher4 z
$Doit_e $zfs create -o compression=on -o exec=on -o setuid=off ${poolname}/tmp
$Doit_e chmod 1777 tmp
$Doit_e $zfs create ${poolname}/usr
$Doit_e $zfs create ${poolname}/usr/home
$Doit_e ln -s usr/home home
$Doit_e $zfs create -o compression=lzjb -o setuid=off ${poolname}/usr/ports
$Doit_e $zfs create -o compression=off  -o exec=off -o setuid=off ${poolname}/usr/ports/distfiles
$Doit_e $zfs create -o compression=off  -o exec=off -o setuid=off ${poolname}/usr/ports/packages
$Doit_e $zfs create ${poolname}/var
$Doit_e $zfs create -o compression=lzjb -o exec=off -o setuid=off ${poolname}/var/crash
$Doit_e $zfs create                     -o exec=off -o setuid=off ${poolname}/var/db
$Doit_e $zfs create -o compression=lzjb -o exec=on  -o setuid=off ${poolname}/var/db/pkg
$Doit_e $zfs create                     -o exec=off -o setuid=off ${poolname}/var/empty
$Doit_e $zfs create -o compression=lzjb -o exec=off -o setuid=off ${poolname}/var/log
$Doit_e $zfs create -o compression=gzip -o exec=off -o setuid=off ${poolname}/var/mail
$Doit_e $zfs create                     -o exec=off -o setuid=off ${poolname}/var/run
$Doit_e $zfs create -o compression=lzjb -o exec=on  -o setuid=off ${poolname}/var/tmp
$Doit_e chmod 1777 var/tmp
$Doit_e $zfs set readonly=on ${poolname}/var/empty

set +x

$NoPrompt && echo ">> ZFS prep done, ready to extract freebsd-dist... " 
$NoPrompt || read -p ">> ZFS prep done, ready to extract freebsd-dist... (hit Enter) " junk

#ls /usr/freebsd-dist/*.txz | xargs -n 1 tar zxvf

# Extract FreeBSD onto the newly minted datasets, with a progress bar
for dist in kernel base lib32 games doc src ports; do
  total=$(tar ztvf /usr/freebsd-dist/${dist}.txz 2>&1 | sed -ne '$=')
  echo ">>> Extracting $dist ($total files)..."
  if $Doit; then
    tar zxvf /usr/freebsd-dist/${dist}.txz 2>&1 | awk -v total="$total" '
    BEGIN {
      size=70
      if (total>50000) {
        mark=100
      } else
      if (total>10000) {
        mark=10
      } else {
        mark=1
      }
      #mark=int(total/(size*10));
      a=sprintf("%" size "s",0); gsub(/./,"*",a);
      b=sprintf("%" size "s",0); gsub(/./,"-",b);
      line=a b;
    }
    NR%mark==0 {
      printf("\r|%s|", substr(line, size-int(size*(NR/total)), size));
    }
    END {
      printf("\r%" size+2 "s\r", " ");
    }'
  else
    $Doit_e tar zxvf /usr/freebsd-dist/${dist}.txz
  fi
done

echo ">> Extraction done, configuring system... "

echo ">>> /etc/rc.conf"
if $Doit; then
  cat <<-EOT1 >> etc/rc.conf

	zfs_enable="YES"
	hostname="install"
	ifconfig_em0="DHCP"
	ifconfig_re0="DHCP"

	EOT1
fi

echo ">>> /boot/loader.conf"
if $Doit; then
  cat <<-EOT2 >> boot/loader.conf

	zfs_load="YES"
	vfs.root.mountfrom="zfs:z"

	# for swap, if we mirror it instead of using swap0/swapN
	#geom_mirror_load="YES"

	EOT2
fi

echo ">>> /etc/fstab"
fmt="\t%s\t\tnone\t\tswap\tsw\t0\t0\n"
if $Doit; then
  cat <<-EOT3 >> etc/fstab
	# Device		Mountpoint	FStype	Options	Dump	Pass#

`for i in $swaplist; do printf "$fmt" "$i"; done`
	#/dev/mirror/swap	none		swap	sw	0	0

	EOT3
fi
cd /

#/sbin/kldload /boot/kernel/geom_mirror.ko
#/sbin/gmirror label -b prefer swap gpt/swap0 gpt/swap1

echo ">> Setting time zone..."
$Doit_e $chroot /mnt tzsetup America/Toronto
echo ">> Making aliases..."
$Doit_e $chroot /mnt sh -c "cd /etc/mail; make aliases"

$NoPrompt && echo ">> Finishing up..."
$NoPrompt || read -p ">> Ready to finish up? (hit Enter) " junk

echo ">> Datasets created, copying zpool.cache..."
$Doit_e cp -p /tmp/zpool.cache /mnt/boot/zfs/

echo ">> Resetting ZFS mountpoints..."
if $Debug; then
	set -x
fi
$Doit_e $zfs umount -a
# These generate errors which it seems we can ignore
$Doit_e $zfs set mountpoint=legacy z && true
$Doit_e $zfs set mountpoint=/tmp ${poolname}/tmp && true
$Doit_e $zfs set mountpoint=/usr ${poolname}/usr && true
$Doit_e $zfs set mountpoint=/var ${poolname}/var && true
set +x

# It's a wrap
echo ">> Exporting ZFS filesystem..."
$Doit_e $zpool export z

